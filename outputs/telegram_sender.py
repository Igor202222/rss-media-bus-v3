import requests
import json
import time
import re
import html
from config import REQUEST_TIMEOUT

class TelegramSender:
    def __init__(self, bot_token, chat_id, topic_id=None):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.topic_id = topic_id  # ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def test_connection(self):
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
        try:
            url = f"{self.base_url}/getMe"
            response = requests.get(url, timeout=REQUEST_TIMEOUT)
            
            if response.status_code == 200:
                bot_info = response.json()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {bot_info['result']['first_name']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ø–∏–∫–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω topic_id
                if self.topic_id:
                    print(f"üì± –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ø–∏–∫: {self.topic_id}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def send_message(self, text, topic_id=None, parse_mode=None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limiting
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            topic_id: ID —Ç–æ–ø–∏–∫–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç self.topic_id)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ ('HTML', 'Markdown' –∏–ª–∏ None)
        """
        max_retries = 2  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                url = f"{self.base_url}/sendMessage"
                
                data = {
                    "chat_id": self.chat_id,
                    "text": text,
                    "disable_web_page_preview": True
                }
                
                # –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
                if parse_mode:
                    data["parse_mode"] = parse_mode
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ç–æ–ø–∏–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
                target_topic_id = topic_id if topic_id is not None else self.topic_id
                
                if target_topic_id:
                    data["message_thread_id"] = target_topic_id
                    print(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ–ø–∏–∫ {target_topic_id}")
                
                response = requests.post(url, json=data, timeout=REQUEST_TIMEOUT)
                
                if response.status_code == 200:
                    return True
                elif response.status_code == 429:
                    # Rate limiting - –ø–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç Telegram
                    error_info = response.json()
                    retry_after = error_info.get('parameters', {}).get('retry_after', 10)
                    
                    print(f"‚è≥ Rate limit #{retry_count + 1}. –û–∂–∏–¥–∞–Ω–∏–µ {retry_after} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(retry_after)  # –ñ–¥–µ–º —Ç–æ—á–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –≥–æ–≤–æ—Ä–∏—Ç Telegram
                    
                    retry_count += 1
                    continue
                else:
                    error_info = response.json()
                    error_description = error_info.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
                    if 'message thread not found' in error_description.lower():
                        print(f"‚ùå –¢–æ–ø–∏–∫ {target_topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ –æ–±—â–∏–π —á–∞—Ç")
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ —Ç–æ–ø–∏–∫–∞
                        data.pop('message_thread_id', None)
                        response = requests.post(url, json=data, timeout=REQUEST_TIMEOUT)
                        return response.status_code == 200
                    
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_description}")
                    return False
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}): {e}")
                retry_count += 1
                if retry_count < max_retries:
                    time.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                    
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    def send_article(self, title, link, description, keywords, categories, source, topic_id=None, article_data=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ + —Ç–µ–≥–∏"""
        try:
            message_parts = []
            
            # 1. –ó–ê–ì–û–õ–û–í–û–ö (–∂–∏—Ä–Ω—ã–º)
            message_parts.append(f"<b>{title}</b>")
            message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            
            # 2. –ü–û–õ–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï –∏–∑ RSS (–±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π)
            if description:
                # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
                clean_description = re.sub(r'<[^>]+>', '', description)
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ (&mdash; ‚Üí ‚Äî, &laquo; ‚Üí ¬´, etc)
                clean_description = html.unescape(clean_description)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                clean_description = clean_description.replace('[continued]', '')
                clean_description = clean_description.strip()
                
                if clean_description:
                    message_parts.append(clean_description)
                    message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            
            # 3. –¢–ï–ì–ò (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
            if categories:
                tags_str = " ".join([f"#{cat.replace(' ', '_').replace('&', 'and')}" for cat in categories])
                message_parts.append(f"üè∑Ô∏è {tags_str}")
            else:
                message_parts.append("üè∑Ô∏è #–±–µ–∑_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
            # 4. –°–°–´–õ–ö–ê –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª
            if link:
                message_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                message_parts.append(f"üîó {link}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "\n".join(message_parts)
            
            return self.send_message(message, topic_id=topic_id, parse_mode='HTML')
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False    
    
    def send_test_message(self, topic_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        test_message = """üß™ <b>–¢–µ—Å—Ç RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –°–ú–ò –∑–∞–ø—É—â–µ–Ω–∞
üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v2.0
üìä AsyncRSSParser –∞–∫—Ç–∏–≤–µ–Ω
üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç

<i>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"""
        
        return self.send_message(test_message, topic_id=topic_id, parse_mode='HTML')
    
    def send_status_update(self, feeds_count, new_articles, keywords_count, monitor_name=None, topic_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        monitor_name = monitor_name or "RSS Monitor"
        
        message = f"""üìä <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>

üéØ –°–∏—Å—Ç–µ–º–∞: {monitor_name}
üì° –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {feeds_count}
üìù –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {new_articles}
üîç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords_count}

‚è∞ {time.strftime('%d.%m.%Y %H:%M')}"""
        
        return self.send_message(message, topic_id=topic_id, parse_mode='HTML')
    
    def send_error_alert(self, error_message, component="RSS Monitor", topic_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        alert_message = f"""üö® <b>–ê–ª–µ—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}
üìù –û—à–∏–±–∫–∞: {error_message}

‚è∞ {time.strftime('%d.%m.%Y %H:%M')}

<i>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</i>"""
        
        return self.send_message(alert_message, topic_id=topic_id, parse_mode='HTML')
    
    def get_topic_info(self, topic_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–ø–∏–∫–µ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)"""
        try:
            # –≠—Ç–æ API –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–∞—Ö, –Ω–æ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
            url = f"{self.base_url}/getForumTopics"
            data = {"chat_id": self.chat_id}
            
            response = requests.post(url, json=data, timeout=REQUEST_TIMEOUT)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    topics = result.get('result', {}).get('topics', [])
                    for topic in topics:
                        if topic.get('message_thread_id') == topic_id:
                            return topic
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–µ: {e}")
            return None