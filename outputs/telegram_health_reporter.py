#!/usr/bin/env python3
"""
–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ –∑–¥–æ—Ä–æ–≤—å–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ Telegram
"""

import json
import requests
import sqlite3
import os
from datetime import datetime, timedelta
from long_term_monitor import LongTermMonitor

class TelegramHealthReporter:
    def __init__(self, instance_path='.'):
        self.instance_path = instance_path
        self.config_file = os.path.join(instance_path, 'config.yaml')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ Telegram
        self.load_telegram_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitor = LongTermMonitor(instance_path)
        
    def load_telegram_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–∑ config.yaml"""
        try:
            import yaml
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                
            telegram_config = config.get('telegram', {})
            self.bot_token = telegram_config.get('bot_token')
            self.chat_id = telegram_config.get('chat_id')
            
            if not self.bot_token or not self.chat_id:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ config.yaml")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # Fallback - –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            self.bot_token = None
            self.chat_id = None
            
    def send_telegram_message(self, message, topic_id=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            print("‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø–∏–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if topic_id:
            data['message_thread_id'] = topic_id
            
        try:
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
            
    def generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.monitor.parse_current_logs(24)
        self.monitor.update_daily_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report = self.monitor.generate_report(7)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        instance_name = os.path.basename(self.instance_path)
        
        message = f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç RSS</b>\n"
        message += f"üè∑Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä: <code>{instance_name}</code>\n"
        message += f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = report['summary']
        message += f"üì° –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: <b>{summary['total_sources']}</b>\n"
        message += f"üü¢ –û—Ç–ª–∏—á–Ω—ã—Ö: <b>{summary['excellent_sources']}</b>\n"
        message += f"üî¥ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: <b>{summary['problematic_sources']}</b>\n"
        message += f"üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: <b>{summary['avg_reliability']}%</b>\n\n"
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        problematic = [(url, data) for url, data in report['sources'].items() 
                      if data['category'] in ['problematic', 'critical']]
        
        if problematic:
            problematic.sort(key=lambda x: x[1]['reliability_score'])
            message += f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è ({len(problematic)}):</b>\n"
            
            for url, data in problematic[:5]:  # –¢–æ–ø-5 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
                domain = data['domain']
                reliability = data['reliability_score']
                status_emoji = "üî¥" if data['category'] == 'critical' else "üü†"
                
                message += f"{status_emoji} <code>{domain}</code>\n"
                message += f"   ‚îî –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: <b>{reliability}%</b>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                if data['recommendations']:
                    rec = data['recommendations'][0]
                    message += f"   ‚îî {rec}\n"
                    
                message += "\n"
                
            if len(problematic) > 5:
                message += f"   ... –∏ –µ—â–µ {len(problematic) - 5} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
        else:
            message += "‚úÖ <b>–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!</b>\n\n"
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        message += self.get_recent_activity()
        
        return message
        
    def get_recent_activity(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
        log_file = os.path.join(self.instance_path, 'monitor.log')
        
        if not os.path.exists(log_file):
            return ""
            
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-100:]
            current_hour = datetime.now().strftime('%H')
            
            success_count = 0
            error_count = 0
            articles_count = 0
            
            for line in recent_lines:
                if current_hour in line:
                    if '‚úÖ' in line and '–Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π' in line:
                        success_count += 1
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
                        import re
                        match = re.search(r'(\d+) –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π', line)
                        if match:
                            articles_count += int(match.group(1))
                    elif '‚ùå' in line or '‚ö†Ô∏è' in line:
                        error_count += 1
                        
            activity = f"üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:</b>\n"
            activity += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{success_count}</b>\n"
            activity += f"‚ùå –û—à–∏–±–æ–∫: <b>{error_count}</b>\n"
            activity += f"üì∞ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: <b>{articles_count}</b>\n"
            
            # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if error_count == 0:
                activity += "üü¢ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–ª–∏—á–Ω–æ</b>"
            elif error_count <= success_count:
                activity += "üü° –°—Ç–∞—Ç—É—Å: <b>–ù–æ—Ä–º–∞</b>"
            else:
                activity += "üî¥ –°—Ç–∞—Ç—É—Å: <b>–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è</b>"
                
            return activity
            
        except Exception as e:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}"
            
    def generate_weekly_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.monitor.parse_current_logs(168)  # 7 –¥–Ω–µ–π
        self.monitor.update_daily_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ 14 –¥–Ω–µ–π
        report = self.monitor.generate_report(14)
        
        instance_name = os.path.basename(self.instance_path)
        
        message = f"üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç RSS</b>\n"
        message += f"üè∑Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä: <code>{instance_name}</code>\n"
        message += f"üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥: {report['period']['start_date']} - {report['period']['end_date']}\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = report['summary']
        message += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        message += f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {summary['total_sources']}\n"
        message += f"üü¢ –û—Ç–ª–∏—á–Ω—ã—Ö: {summary['excellent_sources']}\n"
        message += f"üü° –•–æ—Ä–æ—à–∏—Ö: {summary['total_sources'] - summary['excellent_sources'] - summary['problematic_sources']}\n"
        message += f"üî¥ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: {summary['problematic_sources']}\n"
        message += f"üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {summary['avg_reliability']}%\n\n"
        
        # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—å—è–º
        top_sources = sorted(
            [(url, data) for url, data in report['sources'].items() if data['articles_found'] > 0],
            key=lambda x: x[1]['articles_found'],
            reverse=True
        )[:5]
        
        if top_sources:
            message += f"üèÜ <b>–¢–æ–ø-5 –ø–æ —Å—Ç–∞—Ç—å—è–º:</b>\n"
            for url, data in top_sources:
                domain = data['domain']
                articles = data['articles_found']
                reliability = data['reliability_score']
                message += f"üì∞ <code>{domain}</code>: {articles} —Å—Ç–∞—Ç–µ–π ({reliability}%)\n"
            message += "\n"
            
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        critical = [(url, data) for url, data in report['sources'].items() 
                   if data['category'] == 'critical']
        
        if critical:
            message += f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ({len(critical)}):</b>\n"
            for url, data in critical:
                domain = data['domain']
                reliability = data['reliability_score']
                message += f"üî¥ <code>{domain}</code> ({reliability}%)\n"
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏
                if data['main_errors']:
                    errors = ', '.join(data['main_errors'][:2])
                    message += f"   ‚îî –û—à–∏–±–∫–∏: {errors}\n"
                    
            message += "\n"
            
        message += f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª\n"
        message += f"üîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        
        return message
        
    def send_daily_report(self, topic_id=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        message = self.generate_daily_report()
        return self.send_telegram_message(message, topic_id)
        
    def send_weekly_report(self, topic_id=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        message = self.generate_weekly_report()
        return self.send_telegram_message(message, topic_id)
        
    def send_alert_if_critical(self, topic_id=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.monitor.parse_current_logs(2)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
        report = self.monitor.generate_report(1)  # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        
        # –ò—â–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        critical_sources = [data for data in report['sources'].values() 
                          if data['category'] == 'critical' and data['is_active']]
        
        if len(critical_sources) >= 3:  # –ï—Å–ª–∏ 3+ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            instance_name = os.path.basename(self.instance_path)
            
            message = f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n"
            message += f"üè∑Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä: <code>{instance_name}</code>\n\n"
            message += f"‚ùå <b>{len(critical_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!</b>\n\n"
            
            for data in critical_sources[:5]:
                domain = data['domain']
                reliability = data['reliability_score']
                message += f"üî¥ <code>{domain}</code> ({reliability}%)\n"
                
            message += f"\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
            
            return self.send_telegram_message(message, topic_id)
            
        return False

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Telegram –æ—Ç—á–µ—Ç—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ RSS')
    parser.add_argument('--path', default='.', help='–ü—É—Ç—å –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É')
    parser.add_argument('--daily', action='store_true', help='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç')
    parser.add_argument('--weekly', action='store_true', help='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    parser.add_argument('--alert', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º')
    parser.add_argument('--topic', type=int, help='ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    
    args = parser.parse_args()
    
    reporter = TelegramHealthReporter(args.path)
    
    if args.daily:
        reporter.send_daily_report(args.topic)
    elif args.weekly:
        reporter.send_weekly_report(args.topic)
    elif args.alert:
        reporter.send_alert_if_critical(args.topic)
    else:
        print("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: --daily, --weekly –∏–ª–∏ --alert")

if __name__ == "__main__":
    main()