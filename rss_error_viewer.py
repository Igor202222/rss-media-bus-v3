#!/usr/bin/env python3
"""
RSS Error Viewer - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ª–æ–≥–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
"""

import json
import sys
from datetime import datetime, timedelta
from pathlib import Path
from core.error_manager import ErrorManager
from core.database import DatabaseManager

def print_separator(title="", char="=", width=80):
    """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    if title:
        print(f"\n{char * 10} {title} {char * (width - len(title) - 12)}")
    else:
        print(char * width)

def format_time_ago(timestamp_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ 'X –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥'"""
    if not timestamp_str:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    try:
        timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        now = datetime.now()
        if timestamp.tzinfo:
            timestamp = timestamp.replace(tzinfo=None)
        
        diff = now - timestamp
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    except:
        return timestamp_str

def get_status_emoji(error_count, last_error_time):
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    if error_count == 0:
        return "‚úÖ"
    elif error_count <= 2:
        return "‚ö†Ô∏è"
    elif error_count <= 5:
        return "üî¥"
    else:
        return "üíÄ"

def show_current_errors():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—à–∏–±–∫–∏ –≤ –ø–∞–º—è—Ç–∏"""
    print_separator("–¢–ï–ö–£–©–ò–ï –û–®–ò–ë–ö–ò –í –ü–ê–ú–Ø–¢–ò")
    
    try:
        db = DatabaseManager()
        error_manager = ErrorManager(db)
        
        stats = error_manager.get_error_statistics()
        
        if stats['total_feeds_with_errors'] == 0:
            print("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫!")
            return
        
        print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {stats['total_feeds_with_errors']}")
        print(f"üìä –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}")
        
        print_separator("–î–ï–¢–ê–õ–ò –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫
        sorted_feeds = sorted(
            stats['feeds'].items(), 
            key=lambda x: x[1]['error_count'], 
            reverse=True
        )
        
        for feed_url, data in sorted_feeds:
            status = get_status_emoji(data['error_count'], data['last_error_time'])
            feed_name = data['feed_name'][:50] + "..." if len(data['feed_name']) > 50 else data['feed_name']
            
            print(f"\n{status} {feed_name}")
            print(f"   URL: {feed_url}")
            print(f"   –û—à–∏–±–æ–∫: {data['error_count']}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è: {format_time_ago(data['last_error_time'])}")
            print(f"   –¢–∏–ø: {data['last_error_type']}")
            
            if data['last_status_code']:
                print(f"   HTTP: {data['last_status_code']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            if data['recent_errors']:
                print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
                for err in data['recent_errors'][-3:]:
                    time_ago = format_time_ago(err['timestamp'])
                    print(f"     ‚Ä¢ {err['error_type']} ({time_ago})")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def show_error_log(lines=50):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞ –æ—à–∏–±–æ–∫"""
    print_separator(f"–ü–û–°–õ–ï–î–ù–ò–ï {lines} –ó–ê–ü–ò–°–ï–ô –õ–û–ì–ê –û–®–ò–ë–û–ö")
    
    log_file = Path("rss_errors.log")
    
    if not log_file.exists():
        print("üìù –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ.")
        return
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
        
        if not all_lines:
            print("üìù –õ–æ–≥ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π.")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        recent_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
        
        for line in recent_lines:
            line = line.strip()
            if line:
                # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –ø–æ —Ç–∏–ø—É
                if "ERROR" in line:
                    print(f"üî¥ {line}")
                elif "INFO" in line and "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in line:
                    print(f"‚úÖ {line}")
                else:
                    print(f"üìù {line}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

def show_recommendations():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    print_separator("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
    
    print("""
üîß –ß–ê–°–¢–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–®–ï–ù–ò–Ø:

1. HTTP 403 Forbidden:
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏: proxy_required: true
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å User-Agent –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–∞—Ä—Å–µ—Ä–∞
   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP/–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

2. HTTP 404 Not Found:  
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL RSS
   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ª–µ–Ω—Ç—ã
   ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å: active: false

3. –¢–∞–π–º–∞—É—Ç—ã (TimeoutError):
   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å timeout –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞

4. –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ (ClientError):
   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å DNS –∏–ª–∏ —Å–µ—Ç—å—é
   ‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

5. –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:
   ‚Ä¢ RSS –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä—É—á–Ω—É—é

üìÅ –§–ê–ô–õ–´ –õ–û–ì–û–í:
   ‚Ä¢ rss_errors.log - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   ‚Ä¢ rss_core.log - –æ–±—â–∏–π –ª–æ–≥ RSS –ø–∞—Ä—Å–µ—Ä–∞  
   ‚Ä¢ user_service.log - –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
""")

def export_report():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö"""
    print_separator("–≠–ö–°–ü–û–†–¢ –û–¢–ß–ï–¢–ê")
    
    try:
        db = DatabaseManager()
        error_manager = ErrorManager(db)
        
        filepath = error_manager.export_error_report()
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = error_manager.get_error_statistics()
        print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {stats['total_feeds_with_errors']}")
        print(f"üìä –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è RSS Error Viewer - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "log":
            lines = int(sys.argv[2]) if len(sys.argv) > 2 else 50
            show_error_log(lines)
        elif command == "export":
            export_report()
        elif command == "help":
            show_recommendations()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: log [N], export, help")
            return
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
        show_current_errors()
        show_error_log(20)
        show_recommendations()

if __name__ == "__main__":
    main() 