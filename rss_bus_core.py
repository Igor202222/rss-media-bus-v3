#!/usr/bin/env python3
"""
RSS Media Bus Core v3.0 - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ RSS
–¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î. –ù–∏–∫–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import asyncio
import yaml
import time
from datetime import datetime
from pathlib import Path
from urllib.parse import urlparse

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from core.source_manager import AsyncRSSParser
from core.database import DatabaseManager
from core.hot_reload import HotReloadManager

class RSSBusCore:
    def __init__(self):
        self.sources = {}
        self.active_sources = []
        self.rss_parser = None
        self.running = False
        
        # Hot Reload –º–µ–Ω–µ–¥–∂–µ—Ä
        self.hot_reload = HotReloadManager("RSS Bus Core")
        self.hot_reload.register_callback('sources', self._on_sources_reload)
        self.hot_reload.setup_signal_handlers()
        
        print("üîÑ Hot Reload –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ (USR1 –¥–ª—è sources.yaml)")
    
    def extract_domain_from_url(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω –∏–∑ URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ feed_id"""
        try:
            parsed = urlparse(url)
            domain = parsed.netloc.lower()
            
            # –£–±–∏—Ä–∞–µ–º www. –ø—Ä–µ—Ñ–∏–∫—Å
            if domain.startswith('www.'):
                domain = domain[4:]
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
            domain_mappings = {
                'static.feed.rbc.ru': 'rbc.ru',
                'feeds.bbci.co.uk': 'bbc.co.uk',
                'feeds.reuters.com': 'reuters.com'
            }
            
            if domain in domain_mappings:
                return domain_mappings[domain]
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å—Ç–∏)
            parts = domain.split('.')
            if len(parts) >= 2:
                return '.'.join(parts[-2:])
            
            return domain
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏–∑ {url}: {e}")
            return url
        
    async def load_sources(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ config/sources.yaml"""
        try:
            sources_file = Path("config/sources.yaml")
            
            if not sources_file.exists():
                raise FileNotFoundError("–§–∞–π–ª config/sources.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            with open(sources_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
            
            self.sources = data.get('sources', {})
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            self.active_sources = []
            for source_id, source_data in self.sources.items():
                if source_data.get('active', False):
                    self.active_sources.append({
                        'id': source_id,
                        'name': source_data.get('name', source_id),
                        'url': source_data.get('url'),
                        'group': source_data.get('group', 'general')
                    })
            
            print(f"‚úÖ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.sources)} –≤—Å–µ–≥–æ, {len(self.active_sources)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            for source in self.active_sources[:5]:
                print(f"üì° {source['name']}")
            if len(self.active_sources) > 5:
                print(f"üì° ... –∏ –µ—â–µ {len(self.active_sources) - 5} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return False
    
    async def initialize_parser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RSS –ø–∞—Ä—Å–µ—Ä–∞ –ë–ï–ó Telegram sender"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DB manager —Å SQLite
            db_manager = DatabaseManager()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º RSS –ø–∞—Ä—Å–µ—Ä –ë–ï–ó Telegram sender
            self.rss_parser = AsyncRSSParser(
                db_manager=db_manager,
                config=None
            )
            
            print("‚úÖ RSS –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –ë–î)")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False
    
    async def parse_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î)"""
        if not self.active_sources:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return
        
        if not self.rss_parser:
            print("‚ùå RSS –ø–∞—Ä—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        cycle_start = datetime.now()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
        stats = {
            'available': [],
            'unavailable': [],
            'total_articles': 0,
            'errors': []
        }
        
        print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {len(self.active_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –ì–æ—Ç–æ–≤–∏–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –†–ï–ê–õ–¨–ù–û –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        feeds_batch = []
        for source in self.active_sources:
            domain_id = self.extract_domain_from_url(source['url'])
            feeds_batch.append((domain_id, source['url'], source['name']))
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(feeds_batch)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –ü–∞—Ä—Å–∏–º –í–°–ï –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        total_articles = await self.rss_parser.parse_all_feeds_async(feeds_batch)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
        stats['total_articles'] = total_articles
        print(f"üìä –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_articles} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
        
        cycle_duration = (datetime.now() - cycle_start).total_seconds()
        
        print(f"\nüìä –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(stats['available'])}")
        print(f"  ‚ùå –û—à–∏–±–∫–∏: {len(stats['unavailable'])}")  
        print(f"  üì∞ –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {stats['total_articles']}")
        
        if stats['errors']:
            print(f"  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {len(stats['errors'])}")
    
    async def start_parsing(self, interval_minutes=5):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS (—Ç–æ–ª—å–∫–æ –ë–î)"""
        self.running = True
        
        print(f"üöÄ RSS Bus Core –∑–∞–ø—É—â–µ–Ω")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç")
        print(f"üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.active_sources)}")
        print(f"üíæ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î")
        print(f"üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        print("=" * 50)
        
        try:
            while self.running:
                timestamp = datetime.now().strftime('%H:%M:%S')
                print(f"\nüîÑ [{timestamp}] –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS")
                
                await self.parse_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                sleep_seconds = interval_minutes * 60
                print(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç...")
                
                for i in range(sleep_seconds):
                    if not self.running:
                        break
                    await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            await self.stop_parsing()
    
    async def _on_sources_reload(self, new_sources):
        """Callback –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏ RSS Bus Core...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        self.sources = new_sources
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        self.active_sources = []
        for source_id, source_data in self.sources.items():
            if source_data.get('active', False):
                self.active_sources.append({
                    'id': source_id,
                    'name': source_data.get('name', source_id),
                    'url': source_data.get('url'),
                    'group': source_data.get('group', 'general')
                })
        
        print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.sources)} –≤—Å–µ–≥–æ, {len(self.active_sources)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        # –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        for source in self.active_sources[:5]:
            print(f"üì° {source['name']}")
        if len(self.active_sources) > 5:
            print(f"üì° ... –∏ –µ—â–µ {len(self.active_sources) - 5} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    
    async def add_source_dynamic(self, source_id, url, name=None, group="user_added"):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if source_id in self.sources:
                print(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ {source_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.sources[source_id] = {
                'url': url,
                'name': name or source_id,
                'group': group,
                'active': True,
                'added_dynamically': True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            self.active_sources.append({
                'id': source_id,
                'name': name or source_id,
                'url': url,
                'group': group
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞
            await self._save_sources_to_file()
            
            print(f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {name or source_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_id}: {e}")
            return False
    
    async def _save_sources_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ YAML —Ñ–∞–π–ª"""
        try:
            import yaml
            from pathlib import Path
            
            sources_file = Path("config/sources.yaml")
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            with open(sources_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é sources
            data['sources'] = self.sources
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(sources_file, 'w', encoding='utf-8') as f:
                yaml.dump(data, f, ensure_ascii=False, default_flow_style=False, indent=2)
                
            print("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    async def stop_parsing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.running = False
        print(f"‚úÖ RSS Bus Core –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è RSS Bus Core"""
    print("üöå RSS Media Bus Core v3.0 - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("=" * 60)
    
    bus_core = RSSBusCore()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if not await bus_core.load_sources():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    if not await bus_core.initialize_parser():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    try:
        await bus_core.start_parsing(interval_minutes=5)
    except KeyboardInterrupt:
        print("\nüõë –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    print("üëã RSS Bus Core –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 