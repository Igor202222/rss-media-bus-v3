#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è RSS Media Bus
–ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
"""

import logging
from typing import Dict, List, Any, Tuple

logger = logging.getLogger(__name__)

class SimpleKeywordFilter:
    """–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º - —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
        {
            "mode": "include|exclude|all",
            "keywords": ["—Å–ª–æ–≤–æ1", "—Å–ª–æ–≤–æ2"],
            "case_sensitive": false,
            "fields": ["title", "description"]
        }
        """
        self.mode = config.get('mode', 'all')
        self.keywords = config.get('keywords', [])
        self.case_sensitive = config.get('case_sensitive', False)
        self.fields = config.get('fields', ['title', 'description'])
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        if not self.case_sensitive:
            self.keywords = [kw.lower() for kw in self.keywords]
        
        logger.info(f"üîç SimpleKeywordFilter: —Ä–µ–∂–∏–º={self.mode}, –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤={len(self.keywords)}")
    
    def filter_article(self, article: Dict[str, Any]) -> Tuple[bool, Dict[str, Any]]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç–∞—Ç—å—é –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É –ø—Ä–∞–≤–∏–ª—É: –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        
        Returns:
            should_send: bool - –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å—Ç–∞—Ç—å—é  
            metadata: dict - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
        """
        
        # –†–µ–∂–∏–º "–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏" - –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if self.mode == 'all' or not self.keywords:
            return True, {
                'filter_mode': self.mode,
                'matched_keywords': [],
                'filter_reason': '–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–∞—Ç—å–∏
        text = self._extract_text(article)
        if not self.case_sensitive:
            text = text.lower()
        
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        matched_keywords = []
        for keyword in self.keywords:
            if keyword in text:  # –ü—Ä–æ—Å—Ç–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
                matched_keywords.append(keyword)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        metadata = {
            'filter_mode': self.mode,
            'matched_keywords': matched_keywords,
            'total_matches': len(matched_keywords)
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if self.mode == 'include':
            # –í–∫–ª—é—á–∞—é—â–∏–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û —Å—Ç–∞—Ç—å–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            should_send = len(matched_keywords) > 0
            if should_send:
                metadata['filter_reason'] = f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞: {', '.join(matched_keywords)}"
            else:
                metadata['filter_reason'] = "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
        elif self.mode == 'exclude':
            # –ò—Å–∫–ª—é—á–∞—é—â–∏–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ë–ï–ó –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            should_send = len(matched_keywords) == 0
            if should_send:
                metadata['filter_reason'] = "–ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                metadata['filter_reason'] = f"–ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —Å–ª–æ–≤–∞–º: {', '.join(matched_keywords)}"
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            should_send = True
            metadata['filter_reason'] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {self.mode}"
        
        return should_send, metadata
    
    def _extract_text(self, article: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç—å–∏"""
        text_parts = []
        
        for field in self.fields:
            if field in article and article[field]:
                text_parts.append(str(article[field]))
        
        return ' '.join(text_parts)

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimpleKeywordFilter")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
    test_articles = [
        {
            'title': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω –ø—Ä–∏–Ω—è—Ç',
            'description': '–ü–∞—Ä–ª–∞–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª –≤–∞–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç'
        },
        {
            'title': '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
            'description': '–ò–∑ –ø–æ–¥ –ø–æ–ª—ã –≤—ã—à–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Å—Ç–µ'
        },
        {
            'title': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
            'description': '–§—É—Ç–±–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ –º–∞—Ç—á'
        }
    ]
    
    # –¢–µ—Å—Ç –≤–∫–ª—é—á–∞—é—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    include_config = {
        'mode': 'include',
        'keywords': ['–ø–æ–¥'],
        'case_sensitive': False,
        'fields': ['title', 'description']
    }
    
    include_filter = SimpleKeywordFilter(include_config)
    
    print("\nüìä –¢–µ—Å—Ç –≤–∫–ª—é—á–∞—é—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '–ø–æ–¥'):")
    for i, article in enumerate(test_articles, 1):
        should_send, metadata = include_filter.filter_article(article)
        status = "‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨" if should_send else "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨"
        print(f"   {i}. '{article['title']}' ‚Üí {status}")
        print(f"      –ù–∞–π–¥–µ–Ω–æ: {metadata['matched_keywords']}")
        print(f"      –ü—Ä–∏—á–∏–Ω–∞: {metadata['filter_reason']}")
    
    # –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–∞—é—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    exclude_config = {
        'mode': 'exclude', 
        'keywords': ['—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª'],
        'case_sensitive': False
    }
    
    exclude_filter = SimpleKeywordFilter(exclude_config)
    
    print("\nüìä –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–∞—é—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (–∏—Å–∫–ª—é—á–∞–µ–º: '—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª'):")
    for i, article in enumerate(test_articles, 1):
        should_send, metadata = exclude_filter.filter_article(article)
        status = "‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨" if should_send else "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨"
        print(f"   {i}. '{article['title']}' ‚Üí {status}")
        print(f"      –ù–∞–π–¥–µ–Ω–æ: {metadata['matched_keywords']}")
        print(f"      –ü—Ä–∏—á–∏–Ω–∞: {metadata['filter_reason']}") 