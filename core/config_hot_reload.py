#!/usr/bin/env python3
"""
Config Hot Reload –¥–ª—è RSS Media Monitoring System
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import asyncio
import time
from datetime import datetime
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class ConfigReloadHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, monitor_instance, event_loop=None):
        self.monitor = monitor_instance
        self.loop = event_loop
        self.last_reload = time.time()
        self.reload_cooldown = 2  # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
        
    def on_modified(self, event):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"""
        if event.is_directory:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        filename = os.path.basename(event.src_path)
        if filename in ['config.py', 'feeds.txt', 'keywords.txt']:
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
            current_time = time.time()
            if current_time - self.last_reload < self.reload_cooldown:
                return
                
            self.last_reload = current_time
            
            print(f"\nüîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {filename}")
            print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} - –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É thread-safe
            if self.loop:
                self.loop.call_soon_threadsafe(
                    lambda: asyncio.create_task(self.reload_config(filename))
                )
            else:
                print(f"‚ö†Ô∏è Event loop –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {filename}")
            
    async def reload_config(self, changed_file):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if changed_file == 'config.py':
                await self._reload_main_config()
            elif changed_file == 'feeds.txt':
                await self._reload_feeds()
            elif changed_file == 'keywords.txt':
                await self._reload_keywords()
                
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞: {changed_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ {changed_file}: {e}")
    
    async def _reload_main_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å config
        import importlib
        import config
        importlib.reload(config)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ
        if hasattr(self.monitor, 'telegram') and self.monitor.telegram:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            topic_id = getattr(config, 'TELEGRAM_TOPIC_ID', None)
            if topic_id != self.monitor.telegram.topic_id:
                self.monitor.telegram.topic_id = topic_id
                print(f"üì± Telegram —Ç–æ–ø–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {topic_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SOURCE_MODES
        if hasattr(config, 'SOURCE_MODES'):
            self.monitor.parser.source_modes = config.SOURCE_MODES
            print(f"üéØ SOURCE_MODES –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(config.SOURCE_MODES)} –ø—Ä–∞–≤–∏–ª")
    
    async def _reload_feeds(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        from config import load_feeds
        
        old_feeds = len(self.monitor.feeds)
        self.monitor.feeds = load_feeds()
        new_feeds = len(self.monitor.feeds)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.monitor._ensure_feeds_in_database()
        
        print(f"üì° RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {old_feeds} ‚Üí {new_feeds}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä
        self.monitor.parser.feeds = self.monitor.feeds
    
    async def _reload_keywords(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        from config import load_keywords
        
        old_keywords = len(self.monitor.keywords)
        self.monitor.keywords = load_keywords()
        new_keywords = len(self.monitor.keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        old_mode = self.monitor.forward_all_mode
        self.monitor.forward_all_mode = self.monitor._detect_working_mode()
        
        if old_mode != self.monitor.forward_all_mode:
            mode_name = "–í–°–ï –ù–û–í–û–°–¢–ò" if self.monitor.forward_all_mode else "–§–ò–õ–¨–¢–†–ê–¶–ò–Ø"
            print(f"üîß –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_name}")
        
        print(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {old_keywords} ‚Üí {new_keywords}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—Å–µ—Ä
        self.monitor.parser.keywords = self.monitor.keywords
        self.monitor.parser.forward_all_mode = self.monitor.forward_all_mode


class HotReloadMixin:
    """Mixin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤ UniversalMediaMonitor"""
    
    def start_file_watcher(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ —Ñ–∞–π–ª–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ handler
            loop = asyncio.get_running_loop()
            self.config_handler = ConfigReloadHandler(self, loop)
            self.file_observer = Observer()
            
            # –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–æ–π
            watch_path = os.path.dirname(os.path.abspath(__file__))
            self.file_observer.schedule(
                self.config_handler, 
                watch_path, 
                recursive=False
            )
            
            self.file_observer.start()
            print(f"üëÅÔ∏è File Watcher –∑–∞–ø—É—â–µ–Ω: {watch_path}")
            print(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã: config.py, feeds.txt, keywords.txt")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å File Watcher: {e}")
            print(f"üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install watchdog")


# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ UniversalMediaMonitor
class UniversalMediaMonitorWithHotReload(HotReloadMixin):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π"""
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å File Watcher"""
        if not await self.initialize():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º File Watcher
        self.start_file_watcher()
        
        print(f"üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
        print(f"üîß –†–µ–∂–∏–º: {'üåê –í–°–ï –ù–û–í–û–°–¢–ò' if self.forward_all_mode else 'üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø'}")
        print(f"üîÑ –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: –í–∫–ª—é—á–µ–Ω–∞")
        print(f"–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            if self.telegram:
                await self._send_startup_message()
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            while self.running:
                try:
                    new_articles = await self.monitoring_cycle()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if hasattr(config, 'SEND_STATUS_UPDATES') and config.SEND_STATUS_UPDATES:
                        await self._send_status_update(len(self.feeds), new_articles)
                    
                    # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
                    await asyncio.sleep(CHECK_INTERVAL_MINUTES * 60)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except KeyboardInterrupt:
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            self.stop_file_watcher()
            if self.telegram:
                topic_id = getattr(self.telegram, 'topic_id', None)
                self.telegram.send_message("üëã –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", topic_id=topic_id)
        
        return 0


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ watchdog
    try:
        import watchdog
        print("‚úÖ watchdog —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install watchdog")
        exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º File Watcher
    print("üß™ –¢–µ—Å—Ç File Watcher - –∏–∑–º–µ–Ω–∏—Ç–µ config.py, feeds.txt –∏–ª–∏ keywords.txt")
    
    class MockMonitor:
        def __init__(self):
            self.feeds = []
            self.keywords = []
            self.forward_all_mode = False
            self.telegram = None
            self.parser = None
    
    monitor = MockMonitor()
    handler = ConfigReloadHandler(monitor)
    
    observer = Observer()
    observer.schedule(handler, ".", recursive=False)
    observer.start()
    
    try:
        print("üëÅÔ∏è –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\nüëÅÔ∏è File Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    observer.join()