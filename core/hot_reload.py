#!/usr/bin/env python3
"""
Hot Reload —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è RSS Media Bus v3.1
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ sources.yaml –∏ users.yaml –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""

import signal
import yaml
import json
import asyncio
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Callable, Optional

logger = logging.getLogger(__name__)

class HotReloadManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, process_name: str = "unknown"):
        self.process_name = process_name
        self.config_dir = Path("config")
        
        # –ö–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        self.reload_callbacks: Dict[str, List[Callable]] = {
            'sources': [],
            'users': [],
            'topics': []
        }
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.last_modified = {}
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.reload_in_progress = False
        
        logger.info(f"üîÑ HotReloadManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_name}")
    
    def register_callback(self, config_type: str, callback: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback'–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if config_type in self.reload_callbacks:
            self.reload_callbacks[config_type].append(callback)
            logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω callback –¥–ª—è {config_type} –≤ {self.process_name}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_type}")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # USR1 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (sources.yaml)
        signal.signal(signal.SIGUSR1, self._handle_sources_reload)
        
        # USR2 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (users.yaml)
        signal.signal(signal.SIGUSR2, self._handle_users_reload)
        
        logger.info(f"üîî –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è {self.process_name}")
        logger.info(f"   USR1 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ sources.yaml")
        logger.info(f"   USR2 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ users.yaml")
    
    def _handle_sources_reload(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ USR1 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª USR1 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ sources.yaml")
        asyncio.create_task(self._reload_sources())
    
    def _handle_users_reload(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ USR2 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª USR2 - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ users.yaml")
        asyncio.create_task(self._reload_users())
    
    async def _reload_sources(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if self.reload_in_progress:
            logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        try:
            self.reload_in_progress = True
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É sources.yaml...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            sources_file = self.config_dir / "sources.yaml"
            with open(sources_file, 'r', encoding='utf-8') as f:
                sources_config = yaml.safe_load(f)
                sources = sources_config.get('sources', {})
            
            logger.info(f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ callbacks
            for callback in self.reload_callbacks['sources']:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(sources)
                    else:
                        callback(sources)
                    logger.info("‚úÖ Callback –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.last_modified['sources'] = datetime.now()
            logger.info("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ sources.yaml –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ sources.yaml: {e}")
        finally:
            self.reload_in_progress = False
    
    async def _reload_users(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.reload_in_progress:
            logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        try:
            self.reload_in_progress = True
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É users.yaml...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_file = self.config_dir / "users.yaml"
            with open(users_file, 'r', encoding='utf-8') as f:
                users_config = yaml.safe_load(f)
                users = users_config if users_config else {}
            
            logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for callback in self.reload_callbacks['users']:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(users)
                    else:
                        callback(users)
                    logger.info("‚úÖ Users callback –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ users callback: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.last_modified['users'] = datetime.now()
            logger.info("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ users.yaml –∏ topics –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ users.yaml: {e}")
        finally:
            self.reload_in_progress = False
    
    def load_initial_config(self, config_type: str) -> Any:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if config_type == 'sources':
                sources_file = self.config_dir / "sources.yaml"
                with open(sources_file, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    return config.get('sources', {})
            
            elif config_type == 'users':
                users_file = self.config_dir / "users.yaml"
                with open(users_file, 'r', encoding='utf-8') as f:
                    return yaml.safe_load(f) or {}
            
            elif config_type == 'topics':
                topics_file = self.config_dir / "topics_mapping.json"
                with open(topics_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_type}")
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {config_type}: {e}")
            return {}
    
    def get_reload_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        return {
            'process_name': self.process_name,
            'reload_in_progress': self.reload_in_progress,
            'last_modified': self.last_modified,
            'registered_callbacks': {
                config_type: len(callbacks) 
                for config_type, callbacks in self.reload_callbacks.items()
            }
        }


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def send_reload_signal(signal_type: str, process_name: Optional[str] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å—É"""
    import subprocess
    import os
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
    if signal_type == 'sources':
        sig = 'USR1'
        config_name = 'sources.yaml'
    elif signal_type == 'users':
        sig = 'USR2'
        config_name = 'users.yaml'
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")
        return False
    
    try:
        if process_name:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
            result = subprocess.run([
                'pgrep', '-f', process_name
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    if pid.strip():
                        os.kill(int(pid), getattr(signal, f'SIG{sig}'))
                        print(f"‚úÖ –°–∏–≥–Ω–∞–ª {sig} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å—É {process_name} (PID: {pid})")
                return True
            else:
                print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å {process_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º RSS Bus
            rss_processes = ['rss_bus_core.py', 'user_notification_service.py']
            sent_count = 0
            
            for process in rss_processes:
                result = subprocess.run([
                    'pgrep', '-f', process
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    pids = result.stdout.strip().split('\n')
                    for pid in pids:
                        if pid.strip():
                            os.kill(int(pid), getattr(signal, f'SIG{sig}'))
                            print(f"‚úÖ –°–∏–≥–Ω–∞–ª {sig} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {process} (PID: {pid})")
                            sent_count += 1
            
            if sent_count > 0:
                print(f"üì° –°–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ {config_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent_count} –ø—Ä–æ—Ü–µ—Å—Å–∞–º")
                return True
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ RSS Bus")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return False


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è CLI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) != 2 or sys.argv[1] not in ['sources', 'users']:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python3 core/hot_reload.py sources  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ sources.yaml")
        print(f"  python3 core/hot_reload.py users    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ users.yaml")
        sys.exit(1)
    
    signal_type = sys.argv[1]
    success = send_reload_signal(signal_type)
    
    if success:
        print(f"üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ {signal_type}.yaml")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        sys.exit(1) 