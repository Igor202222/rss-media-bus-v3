#!/usr/bin/env python3
"""
RSS Media Bus - User Notification Service v3.0
–ß–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
"""

import asyncio
import yaml
import json
import time
import pytz
from datetime import datetime, timedelta
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from core.database import DatabaseManager
from outputs.telegram_sender import TelegramSender

class UserNotificationService:
    def __init__(self):
        self.db = None
        self.users = {}
        self.running = False
        self.last_check_time = {}
    
    async def load_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ config/users.yaml"""
        try:
            users_file = Path("config/users.yaml")
            
            if not users_file.exists():
                raise FileNotFoundError("–§–∞–π–ª config/users.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            with open(users_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ (users –≤ –∫–æ—Ä–Ω–µ –∏–ª–∏ –≤ —Å–µ–∫—Ü–∏–∏ 'users')
            users_data = data.get('users', data)
            
            self.users = {}
            for user_id, user_data in users_data.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if not user_data.get('active'):
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Telegram
                telegram_config = user_data.get('telegram', {})
                if not telegram_config.get('enabled') or not telegram_config.get('bot_token'):
                    continue
                
                # –°–æ–∑–¥–∞–µ–º TelegramSender –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    telegram_sender = TelegramSender(
                        bot_token=telegram_config['bot_token'],
                        chat_id=telegram_config['chat_id']
                    )
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º mapping —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    topics_mapping = {}
                    try:
                        with open('config/topics_mapping.json', 'r', encoding='utf-8') as f:
                            topics_mapping = json.load(f)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ topics_mapping –¥–ª—è {user_id}: {e}")
                    
                    self.users[user_id] = {
                        'name': user_data.get('name', user_id),
                        'telegram_sender': telegram_sender,
                        'sources': user_data.get('sources', []),
                        'topics_mapping': topics_mapping,
                        'processors': user_data.get('processors', []),
                        'chat_id': telegram_config['chat_id']
                    }
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ –¢–ï–ö–£–©–ï–ï –≤—Ä–µ–º—è
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ü–û–°–õ–ï –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
                    self.last_check_time[user_id] = datetime.now()
                    
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    print(f"   üì± Chat ID: {telegram_config['chat_id']}")
                    print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(user_data.get('sources', []))}")
                    print(f"   üìã –¢–æ–ø–∏–∫–æ–≤: {len(topics_mapping)}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è {user_id}: {e}")
            
            print(f"\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {len(self.users)}")
            return len(self.users) > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False
    
    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db = DatabaseManager()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def get_user_keywords(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
        user_data = self.users.get(user_id, {})
        processors = user_data.get('processors', [])
        
        keywords = []
        for processor in processors:
            if processor.get('name') == 'keyword_filter':
                config = processor.get('config', {})
                keywords.extend(config.get('keywords', []))
        
        return keywords
    
    def should_send_article_to_user(self, article, user_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_data = self.users.get(user_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sources = user_data.get('sources', [])
        if user_sources and article['feed_id'] not in user_sources:
            return False, []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        processors = user_data.get('processors', [])
        
        # –ò—â–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for processor in processors:
            if processor.get('name') == 'keyword_filter':
                config = processor.get('config', {})
                keywords = config.get('keywords', [])
                mode = config.get('mode', 'include')
                min_matches = config.get('min_matches', 1)
                
                if keywords:
                    matched_keywords = self.check_keywords_in_article(article, keywords)
                    
                    if mode == 'include':
                        if len(matched_keywords) >= min_matches:
                            return True, matched_keywords
                        else:
                            return False, []
                    elif mode == 'exclude':
                        if len(matched_keywords) >= min_matches:
                            return False, matched_keywords
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ—à–ª–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        return True, []
    
    def check_keywords_in_article(self, article, keywords):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç–∞—Ç—å–µ"""
        matched_keywords = []
        
        # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–æ–Ω—Ç–µ–Ω—Ç)
        search_text = " ".join([
            article.get('title', ''),
            article.get('description', ''),
            article.get('content', '')
        ]).lower()
        
        for keyword in keywords:
            if keyword.lower() in search_text:
                matched_keywords.append(keyword)
        
        return matched_keywords
    
    def get_topic_id_for_source(self, user_id, source_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = self.users.get(user_id, {})
        topics_mapping = user_data.get('topics_mapping', {})
        
        if source_id in topics_mapping:
            return topics_mapping[source_id].get('topic_id')
        
        return None
    
    async def send_article_to_user(self, article, user_id, matched_keywords=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_data = self.users.get(user_id)
        if not user_data:
            return False
        
        telegram_sender = user_data['telegram_sender']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø–∏–∫ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        topic_id = self.get_topic_id_for_source(user_id, article['feed_id'])
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            description = article.get('description', '')
            link = article.get('link', '')
            categories = article.get('tags', []) if article.get('tags') else []
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ TelegramSender
            success = telegram_sender.send_article(
                title=title,
                link=link,
                description=description,
                keywords=matched_keywords or [],
                categories=categories,
                source=article.get('feed_id', 'unknown'),
                topic_id=topic_id
            )
            
            if success:
                source_name = article.get('feed_id', 'unknown')
                topic_info = f" (—Ç–æ–ø–∏–∫ {topic_id})" if topic_id else ""
                print(f"üì§ {user_id}: {title[:40]}... ‚Üí {source_name}{topic_info}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {title[:40]}...")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def check_new_articles_for_user(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users:
            return 0
        
        last_check = self.last_check_time.get(user_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –ë–î
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            query = """
            SELECT feed_id, title, description, content, link, tags, published_date
            FROM articles 
            WHERE added_date > ? 
            ORDER BY added_date DESC
            LIMIT 100
            """
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ë–î
            moscow_tz = pytz.timezone('Europe/Moscow')
            
            if last_check.tzinfo is None:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                moscow_time = moscow_tz.localize(last_check)
            else:
                moscow_time = last_check
                
            utc_time = moscow_time.astimezone(pytz.UTC)
            utc_str = utc_time.strftime('%Y-%m-%d %H:%M:%S')
            
            cursor.execute(query, (utc_str,))
            articles = cursor.fetchall()
            conn.close()
            
            sent_count = 0
            for article_row in articles:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º row –≤ —Å–ª–æ–≤–∞—Ä—å
                article = {
                    'feed_id': article_row[0],
                    'title': article_row[1],
                    'description': article_row[2],
                    'content': article_row[3],
                    'link': article_row[4],
                    'tags': json.loads(article_row[5]) if article_row[5] else [],
                    'published_date': article_row[6]
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                should_send, matched_keywords = self.should_send_article_to_user(article, user_id)
                
                if should_send:
                    success = await self.send_article_to_user(article, user_id, matched_keywords)
                    if success:
                        sent_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_check_time[user_id] = datetime.now()
            
            return sent_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–µ–π –¥–ª—è {user_id}: {e}")
            return 0
    
    async def notification_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.users:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        cycle_start = datetime.now()
        total_sent = 0
        
        print(f"üîî –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user_id in self.users:
            try:
                user_name = self.users[user_id]['name']
                print(f"üë§ {user_name[:20]}...", end=" ")
                
                sent_count = await self.check_new_articles_for_user(user_id)
                total_sent += sent_count
                
                if sent_count > 0:
                    print(f"üì§ {sent_count} —Å—Ç–∞—Ç–µ–π")
                else:
                    print("üì° –±–µ–∑ –Ω–æ–≤—ã—Ö")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        cycle_duration = (datetime.now() - cycle_start).total_seconds()
        
        print(f"\nüìä –¶–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å:")
        print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
        print(f"  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {total_sent}")
    
    async def start_notifications(self, interval_minutes=2):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = True
        
        print(f"üîî User Notification Service –∑–∞–ø—É—â–µ–Ω")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç")
        print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
        print(f"üì± –†–µ–∂–∏–º: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")
        print(f"üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        print("=" * 50)
        
        try:
            while self.running:
                timestamp = datetime.now().strftime('%H:%M:%S')
                print(f"\nüîî [{timestamp}] –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
                await self.notification_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                sleep_seconds = interval_minutes * 60
                print(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç...")
                
                for i in range(sleep_seconds):
                    if not self.running:
                        break
                    await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            await self.stop_notifications()
    
    async def stop_notifications(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
        print(f"‚úÖ User Notification Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è User Notification Service"""
    print("üîî RSS Media Bus - User Notification Service v3.0")
    print("=" * 60)
    
    service = UserNotificationService()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    if not await service.initialize_database():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not await service.load_users():
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try:
        await service.start_notifications(interval_minutes=2)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–∏—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    print("üëã User Notification Service –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 