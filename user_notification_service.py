#!/usr/bin/env python3
"""
RSS Media Bus - User Notification Service v3.0
–ß–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
"""

import asyncio
import sqlite3
import yaml
import signal
import json
import time
import pytz
from datetime import datetime, timedelta
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from core.database import DatabaseManager
from outputs.telegram_sender import TelegramSender
from core.hot_reload import HotReloadManager
from processors.keyword_filter import AdvancedKeywordFilter


class UserNotificationService:
    def __init__(self):
        self.db = None
        self.users = {}
        self.running = False
        self.last_check_time = {}
        
        # Hot Reload –º–µ–Ω–µ–¥–∂–µ—Ä
        self.hot_reload = HotReloadManager("User Notification Service")
        self.hot_reload.register_callback('users', self._on_users_reload)
        self.hot_reload.register_callback('topics', self._on_topics_reload)
        self.hot_reload.setup_signal_handlers()
        
        print("üîÑ Hot Reload –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ (USR2 –¥–ª—è users.yaml)")
        import logging
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s', handlers=[logging.FileHandler("user_service_debug.log"), logging.StreamHandler()])
        self.logger = logging.getLogger(__name__)
        self.logger.info("User Notification Service initialized")
    
    async def load_users(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö telegram_configs –∏–∑ config/users.yaml
        """
        try:
            users_file = Path("config/users.yaml")
            if not users_file.exists():
                raise FileNotFoundError("–§–∞–π–ª config/users.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            with open(users_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
            users_data = data.get('users', data)
            self.users = {}
            self.last_check_time = {}
            for user_id, user_data in users_data.items():
                if not user_data.get('active'):
                    continue
                telegram_configs = user_data.get('telegram_configs')
                if not telegram_configs:
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    telegram_configs = {}
                    telegram = user_data.get('telegram', {})
                    if telegram.get('enabled') and telegram.get('bot_token'):
                        telegram_configs['default'] = telegram
                for config_id, telegram_config in telegram_configs.items():
                    if not telegram_config.get('enabled') or not telegram_config.get('bot_token'):
                        continue
                    try:
                        telegram_sender = TelegramSender(
                            bot_token=telegram_config['bot_token'],
                            chat_id=telegram_config['chat_id']
                        )
                        # –ü–æ–ª—É—á–∞–µ–º topics_mapping –∏–∑ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        topics_mapping = telegram_config.get('topics_mapping', {})
                        key = f"{user_id}::{config_id}"
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º processors –∏–∑ telegram_config, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ user_data
                        processors = telegram_config.get('processors', user_data.get('processors', []))
                        self.users[key] = {
                            'name': user_data.get('name', user_id),
                            'telegram_sender': telegram_sender,
                            'sources': telegram_config.get('sources', user_data.get('sources', [])),
                            'topics_mapping': topics_mapping,
                            'processors': processors,
                            'chat_id': telegram_config['chat_id']
                        }
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
                        self.last_check_time[key] = datetime.now(pytz.timezone('Europe/Moscow'))
                        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} / {config_id} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                        print(f"   üì± Chat ID: {telegram_config['chat_id']}")
                        print(f"   üì° –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.users[key]['sources'])}")
                        print(f"   üóÇÔ∏è –¢–æ–ø–∏–∫–æ–≤: {len(topics_mapping)}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è {user_id}/{config_id}: {e}")
            print(f"\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö telegram-–∫–æ–Ω—Ñ–∏–≥–æ–≤: {len(self.users)}")
            return len(self.users) > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False
    
    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db = DatabaseManager()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def get_user_keywords(self, user_key):
        user_data = self.users.get(user_key, {})
        processors = user_data.get('processors', [])
        keywords = []
        for processor in processors:
            if processor.get('name') == 'keyword_filter':
                config = processor.get('config', {})
                keywords.extend(config.get('keywords', []))
        return keywords
    
    def should_send_article_to_user(self, article, user_key):
        user_data = self.users.get(user_key, {})
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–¥–∞–Ω, –Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç,
        # –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–¥–æ–º–µ–Ω ‚Üí –¥–æ–º–µ–Ω).
        user_sources = user_data.get('sources', [])
        if user_sources:
            art_source = str(article['feed_id']).lower()
            if art_source not in user_sources:
                return False, []
        processors = user_data.get('processors', [])
        for processor in processors:
            if processor.get('name') == 'keyword_filter':
                config = processor.get('config', {})
                keywords = config.get('keywords', [])
                mode = config.get('mode', 'include')
                min_matches = config.get('min_matches', 1)
                if keywords:
                    matched_keywords = self.check_keywords_in_article(article, keywords)
                    if mode == 'include':
                        if len(matched_keywords) >= min_matches:
                            return True, matched_keywords
                        else:
                            return False, []
                    elif mode == 'exclude':
                        if len(matched_keywords) >= min_matches:
                            return False, matched_keywords
        return True, []
    
    def check_keywords_in_article(self, article, keywords):
        if not keywords:
            return []
        filter_config = {
            'mode': 'include',
            'keywords': keywords,
            'case_sensitive': False,
            'fields': ['title', 'description', 'content']
        }
        advanced_filter = AdvancedKeywordFilter(filter_config)
        should_send, metadata = advanced_filter.filter_article(article)
        return metadata.get('matched_keywords', []) if should_send else []
    
    def get_topic_id_for_source(self, user_key, source_id):
        user_data = self.users.get(user_key, {})
        topics_mapping = user_data.get('topics_mapping', {})
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ mapping
        if source_id in topics_mapping:
            topic = topics_mapping[source_id]
            if isinstance(topic, dict):
                return topic.get('topic_id')
            return topic
        
        # Fallback: –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –¥–æ–º–µ–Ω–∞
        for mapped_source, topic_id in topics_mapping.items():
            if mapped_source in source_id or source_id in mapped_source:
                if isinstance(topic_id, dict):
                    return topic_id.get('topic_id')
                return topic_id
        
        return None
    
    async def send_article_to_user(self, article, user_key, matched_keywords=None):
        user_data = self.users.get(user_key)
        if not user_data:
            return False
        telegram_sender = user_data['telegram_sender']
        topic_id = self.get_topic_id_for_source(user_key, article['feed_id'])
        try:
            title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            description = article.get('description', '')
            link = article.get('link', '')
            categories = article.get('tags', []) if article.get('tags') else []
            success = telegram_sender.send_article(
                title=title,
                link=link,
                description=description,
                keywords=matched_keywords or [],
                categories=categories,
                source=article.get('feed_id', 'unknown'),
                topic_id=topic_id
            )
            if success:
                source_name = article.get('feed_id', 'unknown')
                topic_info = f" (—Ç–æ–ø–∏–∫ {topic_id})" if topic_id else ""
                print(f"üì§ {user_key}: {title[:40]}... ‚Üí {source_name}{topic_info}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_key}: {title[:40]}...")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_key}: {e}")
            return False
    
    async def check_articles_for_user(self, user_key):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç–æ—è—â–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é"""
        try:
            user_data = self.users[user_key]
            last_check = self.last_check_time[user_key]
            
            self.logger.debug(f"Last check for {user_key}: {last_check}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
            utc_time = last_check.astimezone(pytz.UTC)
            self.logger.debug(f"Querying articles after {utc_time.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–•–†–û–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–û–†–Ø–î–û–ö!)
            query = """
                SELECT id, feed_id, title, link, description, tags, published_date, added_date
                FROM articles 
                WHERE added_date > ? 
                ORDER BY published_date ASC, added_date ASC
                LIMIT 500
            """
            
            conn = self.db.get_connection()
            cursor = conn.cursor()
            cursor.execute(query, (utc_time.strftime('%Y-%m-%d %H:%M:%S'),))
            articles = cursor.fetchall()
            conn.close()
            
            self.logger.info(f"Found {len(articles)} potential new articles for {user_key}")
            
            if not articles:
                self.logger.info(f"Sent 0 articles for {user_key}")
                return 0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            articles_to_send = []
            for article_row in articles:
                article = {
                    'id': article_row[0],
                    'feed_id': article_row[1],
                    'title': article_row[2],
                    'link': article_row[3],
                    'description': article_row[4],
                    'tags': json.loads(article_row[5]) if article_row[5] else [],
                    'published_date': article_row[6],
                    'added_date': article_row[7]
                }
                should_send, matched_keywords = self.should_send_article_to_user(article, user_key)
                if should_send:
                    articles_to_send.append((article, matched_keywords))
            
            # –ú–ê–°–°–û–í–ê–Ø –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if articles_to_send:
                sent_count = await self._send_articles_batch_async(articles_to_send, user_key)
            else:
                sent_count = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_check_time[user_key] = datetime.now(pytz.timezone('Europe/Moscow'))
            self.logger.info(f"Sent {sent_count} articles for {user_key}")
            return sent_count
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–µ–π –¥–ª—è {user_key}: {e}")
            return 0

    async def _send_articles_batch_async(self, articles_to_send, user_key):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–µ–π –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        sent_count = 0
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        for article, matched_keywords in articles_to_send:
            task = self.send_article_to_user(article, user_key, matched_keywords)
            tasks.append(task)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        async def send_with_limit(task):
            async with semaphore:
                success = await task
                if success:
                    return 1
                await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                return 0
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*[send_with_limit(task) for task in tasks], return_exceptions=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for result in results:
            if isinstance(result, int):
                sent_count += result
        
        return sent_count
    
    async def notification_cycle(self):
        if not self.users:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö telegram-–∫–æ–Ω—Ñ–∏–≥–æ–≤")
            return
        cycle_start = datetime.now()
        total_sent = 0
        self.logger.info(f"üîî –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è {len(self.users)} telegram-–∫–æ–Ω—Ñ–∏–≥–æ–≤...")
        for user_key in self.users:
            try:
                user_name = self.users[user_key]['name']
                self.logger.info(f"üë§ {user_key[:30]}...")
                sent_count = await self.check_articles_for_user(user_key)
                total_sent += sent_count
                if sent_count > 0:
                    self.logger.info(f"üì§ {sent_count} —Å—Ç–∞—Ç–µ–π")
                else:
                    self.logger.info("üì° –±–µ–∑ –Ω–æ–≤—ã—Ö")
                await asyncio.sleep(1)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_key}: {e}")
        cycle_duration = (datetime.now() - cycle_start).total_seconds()
        self.logger.info(f"\nüìä –¶–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å:")
        self.logger.info(f"  üë• telegram-–∫–æ–Ω—Ñ–∏–≥–æ–≤: {len(self.users)}")
        self.logger.info(f"  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {total_sent}")
    
    async def start_notifications(self, interval_minutes=2):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = True
        
        print(f"üîî User Notification Service –∑–∞–ø—É—â–µ–Ω")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç")
        print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
        print(f"üì± –†–µ–∂–∏–º: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")
        print(f"üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        print("=" * 50)
        
        try:
            while self.running:
                timestamp = datetime.now().strftime('%H:%M:%S')
                print(f"\nüîî [{timestamp}] –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
                await self.notification_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –º–∏–Ω—É—Ç)
                sleep_seconds = max(1, int(interval_minutes * 60))
                print(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç...")

                for i in range(sleep_seconds):
                    if not self.running:
                        break
                    await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            await self.stop_notifications()
    
    async def _on_users_reload(self, new_users):
        """Callback –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π User Notification Service...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        old_last_check = self.last_check_time.copy()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users = {}
        self.last_check_time = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
        users_data = new_users if new_users else {}
        
        for user_id, user_data in users_data.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not user_data.get('active'):
                continue
            
            telegram_configs = user_data.get('telegram_configs', {})
            for config_id, telegram_config in telegram_configs.items():
                if not telegram_config.get('enabled') or not telegram_config.get('bot_token'):
                    continue
                
                # –°–æ–∑–¥–∞–µ–º TelegramSender –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    telegram_sender = TelegramSender(
                        bot_token=telegram_config['bot_token'],
                        chat_id=telegram_config['chat_id']
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º topics_mapping –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                    topics_mapping = telegram_config.get('topics_mapping', {})
                    
                    key = f"{user_id}::{config_id}"
                    self.users[key] = {
                        'name': user_data.get('name', user_id),
                        'telegram_sender': telegram_sender,
                        'sources': user_data.get('sources', []),
                        'topics_mapping': topics_mapping,
                        'processors': telegram_config.get('processors', user_data.get('processors', [])),
                        'chat_id': telegram_config['chat_id']
                    }
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ
                    if key in old_last_check:
                        self.last_check_time[key] = old_last_check[key]
                        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {key} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (–≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)")
                    else:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏  
                        self.last_check_time[key] = datetime.now(pytz.timezone('Europe/Moscow'))
                        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {key} –¥–æ–±–∞–≤–ª–µ–Ω (–Ω–æ–≤—ã–π)")
                
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è {user_id}::{config_id}: {e}")
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
    
    async def _on_topics_reload(self, new_topics):
        """Callback –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∏–∫–æ–≤ mapping"""
        print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é topics mapping: {len(new_topics)} —Ç–æ–ø–∏–∫–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º topics mapping –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_key, user_data in self.users.items():
            user_data['topics_mapping'] = new_topics
        
        print("‚úÖ Topics mapping –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def stop_notifications(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
        print(f"‚úÖ User Notification Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è User Notification Service"""
    print("üîî RSS Media Bus - User Notification Service v3.0")
    print("=" * 60)
    
    service = UserNotificationService()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    if not await service.initialize_database():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not await service.load_users():
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try:
        # 0.5 –º–∏–Ω = 30 —Å–µ–∫—É–Ω–¥, –∫–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        await service.start_notifications(interval_minutes=0.5)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–∏—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    print("üëã User Notification Service –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 