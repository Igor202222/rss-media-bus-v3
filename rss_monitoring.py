#!/usr/bin/env python3
"""
RSS Media Bus - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ v3.0
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import asyncio
import yaml
import time
from datetime import datetime
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from core.source_manager import AsyncRSSParser
from outputs.debug_chat_logger import log_system, log_rss, log_error

class RSSMonitor:
    def __init__(self):
        self.sources = {}
        self.active_sources = []
        self.rss_parser = None
        self.running = False
        
    async def load_sources(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ config/sources.yaml"""
        try:
            sources_file = Path("config/sources.yaml")
            
            if not sources_file.exists():
                raise FileNotFoundError("–§–∞–π–ª config/sources.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            with open(sources_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
            
            self.sources = data.get('sources', {})
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            self.active_sources = []
            for source_id, source_data in self.sources.items():
                if source_data.get('active', False):
                    self.active_sources.append({
                        'id': source_id,
                        'name': source_data.get('name', source_id),
                        'url': source_data.get('url'),
                        'group': source_data.get('group', 'general')
                    })
            
            # –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å, –Ω–µ –≤ Telegram
            print(f"‚úÖ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.sources)} –≤—Å–µ–≥–æ, {len(self.active_sources)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            for source in self.active_sources:
                print(f"üì° {source['name']} ({source['group']}) - {source['url']}")
            
            return True
            
        except Exception as e:
            await log_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", str(e))
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return False
    
    async def initialize_parser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RSS –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π mock DB manager
            class MockDBManager:
                def __init__(self):
                    self.articles = []
                    self.feeds_info = {}
                
                def is_article_new(self, url):
                    return url not in [a.get('url') for a in self.articles]
                
                def article_exists(self, link):
                    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –ø–æ —Å—Å—ã–ª–∫–µ (–æ–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫ is_article_new)"""
                    if not link:
                        return False
                    return link in [a.get('link') for a in self.articles]
                
                def add_article(self, feed_id, title, link, description, content, author, published_date):
                    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ mock –±–∞–∑—É"""
                    if self.article_exists(link):
                        return None  # –°—Ç–∞—Ç—å—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    
                    article_id = len(self.articles) + 1
                    article_data = {
                        'id': article_id,
                        'feed_id': feed_id,
                        'title': title,
                        'link': link,
                        'description': description,
                        'content': content,
                        'author': author,
                        'published_date': published_date
                    }
                    self.articles.append(article_data)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {title[:50]}...")
                    return article_id
                
                def save_article(self, article_data):
                    self.articles.append(article_data)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {article_data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]}...")
                
                def update_feed_info(self, feed_url=None, status=None, last_check=None, articles_count=0, error_msg=None, **kwargs):
                    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–µ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"""
                    if feed_url:
                        self.feeds_info[feed_url] = {
                            'status': status,
                            'last_check': last_check,
                            'articles_count': articles_count,
                            'error_msg': error_msg,
                            **kwargs
                        }
            
            # –°–æ–∑–¥–∞–µ–º mock Telegram sender
            class MockTelegramSender:
                def send_article(self, title, description, link, source, keywords=None, categories=None, topic_id=None):
                    print(f"üì± [MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞: {title[:40]}... –æ—Ç {source}")
                    return True
            
            db_manager = MockDBManager()
            telegram_sender = MockTelegramSender()
            
            # –°–æ–∑–¥–∞–µ–º RSS –ø–∞—Ä—Å–µ—Ä
            self.rss_parser = AsyncRSSParser(
                db_manager=db_manager,
                telegram_sender=telegram_sender,
                keywords=["–Ω–æ–≤–æ—Å—Ç–∏", "–≤–∞–∂–Ω–æ"],  # –ë–∞–∑–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                config=None
            )
            
            print("‚úÖ RSS –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            await log_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞", str(e))
            return False
    
    async def monitor_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if not self.active_sources:
            await log_rss("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return
        
        if not self.rss_parser:
            await log_error("RSS –ø–∞—Ä—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        cycle_start = datetime.now()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
        stats = {
            'available': [],      # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –∫–æ–ª-–≤–æ–º —Å—Ç–∞—Ç–µ–π
            'unavailable': [],    # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
            'total_articles': 0,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
            'errors': []          # –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        }
        
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(self.active_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        for source in self.active_sources:
            try:
                print(f"üì° –ü—Ä–æ–≤–µ—Ä–∫–∞: {source['name']}")
                
                # –ü–∞—Ä—Å–∏–º RSS –∏—Å—Ç–æ—á–Ω–∏–∫ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π)
                articles_count = await self.rss_parser.parse_all_feeds_async([('source', source['url'])])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —á–∏—Å–ª–æ —Å—Ç–∞—Ç–µ–π
                if isinstance(articles_count, int) and articles_count >= 0:
                    stats['available'].append({
                        'name': source['name'],
                        'articles': articles_count
                    })
                    stats['total_articles'] += articles_count
                    
                    if articles_count > 0:
                        print(f"‚úÖ {source['name']}: {articles_count} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
                    else:
                        print(f"üì° {source['name']}: –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç")
                else:
                    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ
                    stats['unavailable'].append({
                        'name': source['name'],
                        'error': f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–∞—Ä—Å–µ—Ä–∞: {type(articles_count)}"
                    })
                    print(f"‚ùå {source['name']}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–∞—Ä—Å–µ—Ä–∞")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                stats['unavailable'].append({
                    'name': source['name'],
                    'error': error_msg
                })
                stats['errors'].append(f"{source['name']}: {error_msg}")
                print(f"‚ùå {source['name']}: {error_msg}")
        
        cycle_duration = (datetime.now() - cycle_start).total_seconds()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞:")
        print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(stats['available'])}")
        print(f"  ‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(stats['unavailable'])}")  
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {stats['total_articles']}")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è: {cycle_duration:.1f}—Å")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ RSS —Ç–æ–ø–∏–∫...")
        await self.send_cycle_summary(stats, cycle_duration)
    
    async def send_cycle_summary(self, stats, duration):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        report = f"üìä RSS –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –û—Ç—á–µ—Ç [{timestamp}]\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_sources = len(stats['available']) + len(stats['unavailable'])
        available_count = len(stats['available'])
        unavailable_count = len(stats['unavailable'])
        
        report += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\n"
        report += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã: {available_count}\n"
        report += f"‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {unavailable_count}\n"
        report += f"‚Ä¢ –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {stats['total_articles']}\n"
        report += f"‚Ä¢ –í—Ä–µ–º—è —Ü–∏–∫–ª–∞: {duration:.1f}—Å\n\n"
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if stats['available']:
            report += f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
            for source in stats['available']:
                if source['articles'] > 0:
                    report += f"‚Ä¢ {source['name']}: {source['articles']} –Ω–æ–≤—ã—Ö\n"
                else:
                    report += f"‚Ä¢ {source['name']}: –±–µ–∑ –Ω–æ–≤—ã—Ö\n"
            report += "\n"
        
        # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if stats['unavailable']:
            report += f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
            for source in stats['unavailable']:
                report += f"‚Ä¢ {source['name']}: {source['error']}\n"
            report += "\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        await log_rss("–ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", report.strip())
    
    async def start_monitoring(self, interval_minutes=15):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = True
        
        # –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"‚úÖ RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        
        print(f"üöÄ RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç")
        print(f"üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(self.active_sources)}")
        print(f"üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        
        try:
            while self.running:
                print(f"\nüîÑ –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - {datetime.now().strftime('%H:%M:%S')}")
                
                await self.monitor_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                sleep_seconds = interval_minutes * 60
                print(f"üò¥ –û–∂–∏–¥–∞–Ω–∏–µ {interval_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                
                for i in range(sleep_seconds):
                    if not self.running:
                        break
                    await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            await self.stop_monitoring()
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        print(f"‚úÖ RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß RSS Media Bus - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ v3.0")
    print("=" * 50)
    
    monitor = RSSMonitor()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if not await monitor.load_sources():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    if not await monitor.initialize_parser():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    try:
        await monitor.start_monitoring(interval_minutes=5)  # –¢–µ—Å—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    asyncio.run(main()) 