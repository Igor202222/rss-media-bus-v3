#!/usr/bin/env python3
"""
RSS Media Bus Manager v3.0
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RSS Bus Core –∏ User Notification Service
"""

import subprocess
import time
import signal
import sys
from pathlib import Path

class RSSBusManager:
    def __init__(self):
        self.rss_core_process = None
        self.notification_service_process = None
        self.running = False
    
    def start_rss_core(self):
        """–ó–∞–ø—É—Å–∫ RSS Bus Core"""
        try:
            print("üöå –ó–∞–ø—É—Å–∫–∞—é RSS Bus Core...")
            self.rss_core_process = subprocess.Popen([
                'python3', 'rss_bus_core.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
            
            print(f"‚úÖ RSS Bus Core –∑–∞–ø—É—â–µ–Ω (PID: {self.rss_core_process.pid})")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RSS Bus Core: {e}")
            return False
    
    def start_notification_service(self):
        """–ó–∞–ø—É—Å–∫ User Notification Service"""
        try:
            print("üîî –ó–∞–ø—É—Å–∫–∞—é User Notification Service...")
            self.notification_service_process = subprocess.Popen([
                'python3', 'user_notification_service.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
            
            print(f"‚úÖ User Notification Service –∑–∞–ø—É—â–µ–Ω (PID: {self.notification_service_process.pid})")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ User Notification Service: {e}")
            return False
    
    def check_processes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        rss_core_alive = self.rss_core_process and self.rss_core_process.poll() is None
        notification_alive = self.notification_service_process and self.notification_service_process.poll() is None
        
        return rss_core_alive, notification_alive
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        rss_core_alive, notification_alive = self.check_processes()
        
        print("\nüìä –°—Ç–∞—Ç—É—Å RSS Media Bus:")
        print("=" * 40)
        
        if rss_core_alive:
            print(f"üöå RSS Bus Core: ‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {self.rss_core_process.pid})")
        else:
            print("üöå RSS Bus Core: ‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if notification_alive:
            print(f"üîî User Notification Service: ‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {self.notification_service_process.pid})")
        else:
            print("üîî User Notification Service: ‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return rss_core_alive and notification_alive
    
    def restart_failed_processes(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–ø–∞–≤—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        rss_core_alive, notification_alive = self.check_processes()
        
        if not rss_core_alive and self.rss_core_process:
            print("‚ö†Ô∏è RSS Bus Core —É–ø–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
            self.start_rss_core()
        
        if not notification_alive and self.notification_service_process:
            print("‚ö†Ô∏è User Notification Service —É–ø–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...")
            self.start_notification_service()
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        
        if self.rss_core_process:
            try:
                self.rss_core_process.terminate()
                self.rss_core_process.wait(timeout=10)
                print("‚úÖ RSS Bus Core –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.rss_core_process.kill()
                print("üî• RSS Bus Core –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RSS Bus Core: {e}")
        
        if self.notification_service_process:
            try:
                self.notification_service_process.terminate()
                self.notification_service_process.wait(timeout=10)
                print("‚úÖ User Notification Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                self.notification_service_process.kill()
                print("üî• User Notification Service –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ User Notification Service: {e}")
        
        self.running = False
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        self.stop_all()
        sys.exit(0)
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã RSS Media Bus"""
        print("üöÄ RSS Media Bus Manager v3.0")
        print("=" * 50)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º RSS Bus Core
        if not self.start_rss_core():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å RSS Bus Core")
            return False
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RSS Bus Core...")
        time.sleep(5)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º User Notification Service
        if not self.start_notification_service():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å User Notification Service")
            self.stop_all()
            return False
        
        print("\nüéâ RSS Media Bus –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω!")
        self.show_status()
        
        self.running = True
        return True
    
    def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüîÑ –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        print("üìù –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            while self.running:
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                if not self.show_status():
                    print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–∞–≤—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
                    self.restart_failed_processes()
                
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.stop_all()

def main():
    manager = RSSBusManager()
    
    if manager.start_all():
        manager.monitor_loop()
    
    print("üëã RSS Media Bus Manager –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main() 