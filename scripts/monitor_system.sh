#!/bin/bash

# monitor_system.sh - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RSS Media Bus v3.0

echo "üìä RSS Media Bus v3.0 - –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
echo "=============================================="
echo "‚è∞ $(date)"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo "üîÑ –ü–†–û–¶–ï–°–°–´:"
echo "----------------------------------------"

RSS_MANAGER_PID=$(ps aux | grep "start_rss_bus.py" | grep -v grep | awk '{print $2}')
RSS_CORE_PID=$(ps aux | grep "rss_bus_core.py" | grep -v grep | awk '{print $2}')
USER_SERVICE_PID=$(ps aux | grep "user_notification_service.py" | grep -v grep | awk '{print $2}')

if [ -n "$RSS_MANAGER_PID" ]; then
    RSS_MANAGER_UPTIME=$(ps -o etime= -p $RSS_MANAGER_PID | tr -d ' ')
    echo "  ‚úÖ RSS Bus Manager    (PID: $RSS_MANAGER_PID, uptime: $RSS_MANAGER_UPTIME)"
else
    echo "  ‚ùå RSS Bus Manager    (–Ω–µ –∑–∞–ø—É—â–µ–Ω)"
fi

if [ -n "$RSS_CORE_PID" ]; then
    RSS_CORE_UPTIME=$(ps -o etime= -p $RSS_CORE_PID | tr -d ' ')
    echo "  ‚úÖ RSS Bus Core       (PID: $RSS_CORE_PID, uptime: $RSS_CORE_UPTIME)"
else
    echo "  ‚ùå RSS Bus Core       (–Ω–µ –∑–∞–ø—É—â–µ–Ω)"
fi

if [ -n "$USER_SERVICE_PID" ]; then
    USER_SERVICE_UPTIME=$(ps -o etime= -p $USER_SERVICE_PID | tr -d ' ')
    echo "  ‚úÖ User Service       (PID: $USER_SERVICE_PID, uptime: $USER_SERVICE_UPTIME)"
else
    echo "  ‚ùå User Service       (–Ω–µ –∑–∞–ø—É—â–µ–Ω)"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:"
echo "----------------------------------------"

if [ -f "rss_media_bus.db" ]; then
    DB_SIZE=$(du -h rss_media_bus.db | cut -f1)
    echo "  üìä –†–∞–∑–º–µ—Ä –ë–î: $DB_SIZE"
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
    TOTAL_ARTICLES=$(sqlite3 rss_media_bus.db "SELECT COUNT(*) FROM articles;" 2>/dev/null || echo "ERROR")
    echo "  üì∞ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: $TOTAL_ARTICLES"
    
    # –°—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    NEW_ARTICLES_HOUR=$(sqlite3 rss_media_bus.db "SELECT COUNT(*) FROM articles WHERE created_at > datetime('now', '-1 hour');" 2>/dev/null || echo "ERROR")
    echo "  üìà –ù–æ–≤—ã—Ö –∑–∞ —á–∞—Å: $NEW_ARTICLES_HOUR"
    
    # –°—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    NEW_ARTICLES_DAY=$(sqlite3 rss_media_bus.db "SELECT COUNT(*) FROM articles WHERE created_at > datetime('now', '-1 day');" 2>/dev/null || echo "ERROR")
    echo "  üìÖ –ù–æ–≤—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: $NEW_ARTICLES_DAY"
    
    # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    echo "  üì° –¢–æ–ø-5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:"
    sqlite3 rss_media_bus.db "
    SELECT '    ' || feed_id || ': ' || COUNT(*) 
    FROM articles 
    GROUP BY feed_id 
    ORDER BY COUNT(*) DESC 
    LIMIT 5;
    " 2>/dev/null | while read line; do
        echo "$line"
    done
    
else
    echo "  ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
echo "üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:"
echo "----------------------------------------"

if [ -f "config/users.yaml" ]; then
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
    USER_STATS=$(python3 -c "
import yaml
try:
    with open('config/users.yaml', 'r', encoding='utf-8') as f:
        users = yaml.safe_load(f) or {}
    
    total = len(users)
    active = sum(1 for u in users.values() if u and u.get('active'))
    telegram_enabled = sum(1 for u in users.values() 
                          if u and u.get('active') and 
                          u.get('telegram', {}).get('enabled'))
    
    print(f'{total}:{active}:{telegram_enabled}')
    
    # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, data in users.items():
        if data and data.get('active'):
            telegram_status = '‚úÖ' if data.get('telegram', {}).get('enabled') else '‚ùå'
            sources_count = len(data.get('sources', []))
            print(f'  {telegram_status} {uid}: {sources_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')
    
except Exception as e:
    print(f'ERROR:{e}')
" 2>/dev/null)
    
    if echo "$USER_STATS" | grep -q "ERROR"; then
        echo "  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config/users.yaml"
    else
        STATS_LINE=$(echo "$USER_STATS" | head -n1)
        TOTAL_USERS=$(echo "$STATS_LINE" | cut -d: -f1)
        ACTIVE_USERS=$(echo "$STATS_LINE" | cut -d: -f2)
        TELEGRAM_USERS=$(echo "$STATS_LINE" | cut -d: -f3)
        
        echo "  üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $TOTAL_USERS"
        echo "  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: $ACTIVE_USERS"
        echo "  üì± –° Telegram: $TELEGRAM_USERS"
        echo ""
        echo "$USER_STATS" | tail -n +2
    fi
else
    echo "  ‚ùå –§–∞–π–ª config/users.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ RSS
echo "üì° RSS –ò–°–¢–û–ß–ù–ò–ö–ò:"
echo "----------------------------------------"

if [ -f "config/sources.yaml" ]; then
    SOURCE_STATS=$(python3 -c "
import yaml
try:
    with open('config/sources.yaml', 'r', encoding='utf-8') as f:
        data = yaml.safe_load(f)
        sources = data.get('sources', {}) if data else {}
    
    total = len(sources)
    active = sum(1 for s in sources.values() if s and s.get('active', True))
    
    print(f'  üìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total}')
    print(f'  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}')
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    groups = {}
    for sid, sdata in sources.items():
        if not sdata:
            continue
        group = sdata.get('group', 'other')
        if group not in groups:
            groups[group] = 0
        if sdata.get('active', True):
            groups[group] += 1
    
    print(f'  üìÇ –ü–æ –≥—Ä—É–ø–ø–∞–º:')
    for group, count in groups.items():
        print(f'    {group}: {count}')
        
except Exception as e:
    print(f'ERROR: {e}')
" 2>/dev/null)
    
    echo "$SOURCE_STATS"
else
    echo "  ‚ùå –§–∞–π–ª config/sources.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
echo "üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:"
echo "----------------------------------------"

# CPU –∏ –ø–∞–º—è—Ç—å –¥–ª—è –Ω–∞—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
if [ -n "$RSS_CORE_PID" ] || [ -n "$USER_SERVICE_PID" ]; then
    echo "  üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ RSS Media Bus:"
    
    if [ -n "$RSS_CORE_PID" ]; then
        RSS_CORE_CPU=$(ps -o %cpu= -p $RSS_CORE_PID | tr -d ' ')
        RSS_CORE_MEM=$(ps -o %mem= -p $RSS_CORE_PID | tr -d ' ')
        RSS_CORE_VSZ=$(ps -o vsz= -p $RSS_CORE_PID | tr -d ' ')
        echo "    RSS Core: CPU ${RSS_CORE_CPU}%, RAM ${RSS_CORE_MEM}%, VSZ ${RSS_CORE_VSZ}KB"
    fi
    
    if [ -n "$USER_SERVICE_PID" ]; then
        USER_SERVICE_CPU=$(ps -o %cpu= -p $USER_SERVICE_PID | tr -d ' ')
        USER_SERVICE_MEM=$(ps -o %mem= -p $USER_SERVICE_PID | tr -d ' ')
        USER_SERVICE_VSZ=$(ps -o vsz= -p $USER_SERVICE_PID | tr -d ' ')
        echo "    User Service: CPU ${USER_SERVICE_CPU}%, RAM ${USER_SERVICE_MEM}%, VSZ ${USER_SERVICE_VSZ}KB"
    fi
fi

# –û–±—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}' | tr -d ' ')
echo "  ‚öñÔ∏è Load Average: $LOAD_AVG"

DISK_USAGE=$(df -h . | tail -1 | awk '{print $5}')
echo "  üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: $DISK_USAGE"

FREE_MEM=$(free -h | awk '/^Mem:/ {print $3 "/" $2}')
echo "  üß† –ü–∞–º—è—Ç—å: $FREE_MEM"

echo ""

# –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
echo "üìä –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:"
echo "----------------------------------------"

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ RSS Core (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ -f "rss_bus_core.log" ]; then
    echo "  üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è RSS Core:"
    tail -n 3 rss_bus_core.log | sed 's/^/    /'
fi

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ User Service (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ -f "user_notification.log" ]; then
    echo "  üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è User Service:"
    tail -n 3 user_notification.log | sed 's/^/    /'
fi

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
if [ -f "rss_media_bus.db" ]; then
    echo "  üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –ë–î:"
    sqlite3 rss_media_bus.db "
    SELECT '    ' || datetime(created_at, 'localtime') || ' - ' || 
           feed_id || ': ' || substr(title, 1, 50) || '...'
    FROM articles 
    ORDER BY created_at DESC 
    LIMIT 3;
    " 2>/dev/null | while read line; do
        echo "$line"
    done
fi

echo ""

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
echo "‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
echo "----------------------------------------"

WARNINGS=0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
if [ -z "$RSS_CORE_PID" ]; then
    echo "  üö® RSS Bus Core –Ω–µ –∑–∞–ø—É—â–µ–Ω - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 start_rss_bus.py"
    WARNINGS=$((WARNINGS + 1))
fi

if [ -z "$USER_SERVICE_PID" ]; then
    echo "  üö® User Notification Service –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    WARNINGS=$((WARNINGS + 1))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
if [ -f "rss_media_bus.db" ]; then
    RECENT_ARTICLES=$(sqlite3 rss_media_bus.db "SELECT COUNT(*) FROM articles WHERE created_at > datetime('now', '-30 minutes');" 2>/dev/null || echo "0")
    if [ "$RECENT_ARTICLES" -eq 0 ]; then
        echo "  ‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        WARNINGS=$((WARNINGS + 1))
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if [ -f "config/users.yaml" ]; then
    TELEGRAM_USERS=$(python3 -c "
import yaml
try:
    with open('config/users.yaml', 'r', encoding='utf-8') as f:
        users = yaml.safe_load(f) or {}
    telegram_enabled = sum(1 for u in users.values() 
                          if u and u.get('active') and 
                          u.get('telegram', {}).get('enabled'))
    print(telegram_enabled)
except:
    print(0)
" 2>/dev/null)
    
    if [ "$TELEGRAM_USERS" -eq 0 ]; then
        echo "  ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram - –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        WARNINGS=$((WARNINGS + 1))
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
if [ -f "rss_media_bus.db" ]; then
    DB_SIZE_MB=$(du -m rss_media_bus.db | cut -f1)
    if [ "$DB_SIZE_MB" -gt 1000 ]; then
        echo "  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö >1GB - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"
        WARNINGS=$((WARNINGS + 1))
    fi
fi

if [ "$WARNINGS" -eq 0 ]; then
    echo "  ‚úÖ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
fi

echo ""
echo "=============================================="
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω - –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $WARNINGS"
echo "üîÑ –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: watch -n 60 './scripts/monitor_system.sh'"
echo "üöÄ RSS Media Bus v3.0 Status: $([ "$WARNINGS" -eq 0 ] && echo "HEALTHY" || echo "NEEDS ATTENTION")" 