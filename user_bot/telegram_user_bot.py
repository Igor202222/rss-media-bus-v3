#!/usr/bin/env python3
"""
RSS Media Bus - –ü—Ä–æ—Å—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import json
import yaml
import sys
from pathlib import Path
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ outputs –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ debug_chat_logger
sys.path.append(str(Path(__file__).parent.parent / "outputs"))

try:
    from debug_chat_logger import create_debug_logger
except ImportError:
    print("‚ö†Ô∏è Debug –ª–æ–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    def create_debug_logger():
        return None

class TelegramUserBot:
    def __init__(self, bot_token: str):
        """
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        self.bot_token = bot_token
        self.config_dir = Path(__file__).parent.parent / "config"
        self.users_file = self.config_dir / "users.yaml"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ config/users.yaml
        
        # –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users = self._load_users_from_yaml()
        
        # Debug –ª–æ–≥–≥–µ—Ä
        self.debug_logger = create_debug_logger()
        if self.debug_logger:
            print("üìä Debug –ª–æ–≥–≥–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
    def _load_users_from_yaml(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ config/users.yaml"""
        try:
            with open(self.users_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                users = config.get('users', {})
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–ø–æ telegram_id)
                users_by_telegram_id = {}
                for user_key, user_data in users.items():
                    if 'telegram_id' in user_data:
                        telegram_id = str(user_data['telegram_id'])
                        users_by_telegram_id[telegram_id] = {
                            "user_id": user_key,
                            "telegram_id": user_data['telegram_id'],
                            "username": user_data.get('username', 'unknown'),
                            "first_name": user_data.get('first_name', ''),
                            "created_at": user_data.get('created_at', ''),
                            "name": user_data.get('name', ''),
                            "active": user_data.get('active', True),
                            "sources": user_data.get('sources', []),
                            "telegram": user_data.get('telegram', {})
                        }
                return users_by_telegram_id
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    
    def _save_users_to_yaml(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ config/users.yaml"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            with open(self.users_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            if 'users' not in config:
                config['users'] = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–æ—Ç–∞
            for telegram_id, user_data in self.users.items():
                user_key = user_data['user_id']
                config['users'][user_key] = {
                    'name': user_data['name'],
                    'description': f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
                    'active': user_data['active'],
                    'registration_method': 'telegram_bot',
                    'telegram_id': user_data['telegram_id'],
                    'username': user_data['username'],
                    'first_name': user_data['first_name'],
                    'created_at': user_data['created_at'],
                    'telegram': user_data['telegram'],
                    'sources': user_data['sources'],
                    'processors': [
                        {
                            'name': 'telegram_sender',
                            'config': {
                                'format': 'markdown',
                                'include_source': True,
                                'max_preview_length': 200
                            }
                        }
                    ]
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            with open(self.users_file, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, ensure_ascii=False, indent=2)
                
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.users_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def _is_user_exists(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return str(user_id) in self.users
    
    def _create_user_id(self, telegram_id: int, username: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if username:
            base_id = f"user_{username}_{telegram_id}"
        else:
            base_id = f"user_{telegram_id}"
        return base_id[:50]
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        first_name = update.effective_user.first_name or ""
        
        if self._is_user_exists(user_id):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_data = self.users[str(user_id)]
            keyboard = [
                [KeyboardButton("üìä –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("üÜò –ü–æ–º–æ—â—å"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.debug_logger:
                await self.debug_logger.log_user_action(
                    user_id, 
                    "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É",
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º—É"
                )
            
            await update.message.reply_text(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n\n"
                f"üÜî –í–∞—à ID: `{user_data['user_id']}`\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'][:10]}\n"
                f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(user_data.get('sources', []))}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            user_data = {
                "user_id": self._create_user_id(user_id, username),
                "telegram_id": user_id,
                "username": username,
                "first_name": first_name,
                "created_at": datetime.now().isoformat(),
                "name": f"{first_name} Monitor",
                "active": True,
                "sources": ["tass_main", "ria_main"],  # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
                "telegram": {
                    "chat_id": str(user_id),
                    "enabled": False  # –í–∫–ª—é—á–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.users[str(user_id)] = user_data
            self._save_users_to_yaml()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.debug_logger:
                await self.debug_logger.log_user_registration(user_id, username, first_name)
            
            await update.message.reply_text(
                f"üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RSS Media Bus!**\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"üÜî –í–∞—à ID: `{user_data['user_id']}`\n"
                f"üì° –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(user_data['sources'])}\n\n"
                f"**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"
                f"1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather\n"
                f"2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω: `/set_token –í–ê–®_–¢–û–ö–ï–ù`\n"
                f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: `/status`",
                parse_mode='Markdown'
            )
    
    async def set_token_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /set_token - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç-—Ç–æ–∫–µ–Ω–∞"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        
        if not self._is_user_exists(user_id):
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        if not context.args:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if self.debug_logger:
                await self.debug_logger.log_user_action(
                    user_id,
                    "–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞",
                    "–ö–æ–º–∞–Ω–¥–∞ /set_token –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
                )
            
            await update.message.reply_text(
                "**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/set_token –í–ê–®_–¢–û–ö–ï–ù`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/set_token 123456789:ABCdef...`\n\n"
                "**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:**\n"
                "1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram\n"
                "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot\n"
                "3. –ó–∞–¥–∞–π—Ç–µ –∏–º—è –∏ username –±–æ—Ç–∞\n"
                "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω",
                parse_mode='Markdown'
            )
            return
        
        token = context.args[0]
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        if not token or len(token) < 10 or ':' not in token:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–∫–µ–Ω–∞
            if self.debug_logger:
                await self.debug_logger.log_token_setup(user_id, username, False)
            
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.users[str(user_id)]["telegram"]["bot_token"] = token
        self.users[str(user_id)]["telegram"]["enabled"] = True
        self._save_users_to_yaml()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–∫–µ–Ω–∞
        if self.debug_logger:
            await self.debug_logger.log_token_setup(user_id, username, True)
        
        await update.message.reply_text(
            f"‚úÖ **–¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
            parse_mode='Markdown'
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        
        if not self._is_user_exists(user_id):
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
        if self.debug_logger:
            await self.debug_logger.log_user_action(
                user_id,
                "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞",
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å"
            )
        
        user_data = self.users[str(user_id)]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        sources_file = self.config_dir / "sources.yaml"
        with open(sources_file, 'r', encoding='utf-8') as f:
            sources_config = yaml.safe_load(f)
            sources = sources_config.get('sources', {})
        
        message = f"üìä **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
        message += f"üÜî ID: `{user_data['user_id']}`\n"
        message += f"üìÖ –°–æ–∑–¥–∞–Ω: {user_data['created_at'][:10]}\n"
        message += f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if user_data.get('active', False) else '–ù–µ—Ç'}\n"
        message += f"ü§ñ –¢–æ–∫–µ–Ω: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if user_data.get('telegram', {}).get('bot_token') else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n"
        
        user_sources = user_data.get('sources', [])
        message += f"üì° **RSS –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(user_sources)}):**\n"
        for source_id in user_sources:
            if source_id in sources:
                source_name = sources[source_id].get('name', source_id)
                source_url = sources[source_id].get('url', '–Ω–µ—Ç URL')
                message += f"  ‚Ä¢ **{source_name}**\n    `{source_url}`\n\n"
            else:
                message += f"  ‚Ä¢ {source_id} (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π)\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(self.users)
        message += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**\n"
        message += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        message += f"üì° –î–æ—Å—Ç—É–ø–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def sources_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /sources - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        
        if not self._is_user_exists(user_id):
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if self.debug_logger:
            await self.debug_logger.log_user_action(
                user_id,
                "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources_file = self.config_dir / "sources.yaml"
        with open(sources_file, 'r', encoding='utf-8') as f:
            sources_config = yaml.safe_load(f)
            sources = sources_config.get('sources', {})
        
        user_data = self.users[str(user_id)]
        user_sources = set(user_data.get('sources', []))
        
        message = f"üì° **–î–æ—Å—Ç—É–ø–Ω—ã–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**\n\n"
        
        for source_id, source_config in sources.items():
            name = source_config.get('name', source_id)
            category = source_config.get('category', 'unknown')
            language = source_config.get('language', 'unknown')
            active = source_config.get('active', True)
            
            # –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            marker = "‚úÖ" if source_id in user_sources else "‚≠ï"
            status = "üü¢" if active else "üî¥"
            
            message += f"{marker} {status} **{name}**\n"
            message += f"   üè∑Ô∏è {category} | üåê {language}\n"
            message += f"   `{source_id}`\n\n"
        
        message += f"**–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:**\n"
        message += f"‚úÖ - –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞–º\n"
        message += f"‚≠ï - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        message += f"üü¢ - –∞–∫—Ç–∏–≤–µ–Ω | üî¥ - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏
        if self.debug_logger:
            await self.debug_logger.log_user_action(
                user_id,
                "–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏",
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É"
            )
        
        message = """üÜò **–°–ø—Ä–∞–≤–∫–∞ RSS Media Bus**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ `/status` - –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
‚Ä¢ `/sources` - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏
‚Ä¢ `/set_token –¢–û–ö–ï–ù` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ `/newbot`
3. –ó–∞–¥–∞–π—Ç–µ –∏–º—è: "–ú–æ–π RSS Monitor"
4. –ó–∞–¥–∞–π—Ç–µ username: "my_rss_monitor_bot"
5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω
6. –í—ã–ø–æ–ª–Ω–∏—Ç–µ `/set_token –¢–û–ö–ï–ù`

**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

RSS Media Bus v3.0 - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π"""

        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def init_debug_logger(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è debug –ª–æ–≥–≥–µ—Ä–∞ –∏ —Ç–æ–ø–∏–∫–æ–≤"""
        if self.debug_logger:
            try:
                await self.debug_logger.init_topics()
                await self.debug_logger.log_system_start("v3.0-user-bot")
                print("‚úÖ Debug –ª–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ debug –ª–æ–≥–≥–µ—Ä–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
        app = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("set_token", self.set_token_command))
        app.add_handler(CommandHandler("status", self.status_command))
        app.add_handler(CommandHandler("sources", self.sources_command))
        app.add_handler(CommandHandler("help", self.help_command))
        
        print(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç RSS Media Bus –∑–∞–ø—É—â–µ–Ω!")
        print(f"üìù –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.users_file}")
        print(f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º debug –ª–æ–≥–≥–µ—Ä –≤ —Ñ–æ–Ω–µ
        if self.debug_logger:
            asyncio.create_task(self.init_debug_logger())
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        app.run_polling()

if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞
    USER_BOT_TOKEN = "7441299677:AAFJn2pDdvQ4BsMVeTBvDzsT8kLpBNDGlwk"  # t.me/rss_media_bus_user_bot
    
    if not USER_BOT_TOKEN or USER_BOT_TOKEN == "YOUR_USER_BOT_TOKEN_HERE":
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π—Ç–µ USER_BOT_TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω")
        exit(1)
    
    bot = TelegramUserBot(USER_BOT_TOKEN)
    bot.run() 